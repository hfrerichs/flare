#!/usr/bin/env python
import argparse
import os
import re
from subprocess import call
import sys

import matplotlib.pyplot as plt

import flare.pyplot      as fplt
import flare.equi2d
import flare.backend


def set_default_subparser(self, name, args=None):
    """default subparser selection:
    name: is the name of the subparser to call by default
    args: if set is the argument list handed to parse_args()
    """
    subparser_found = False
    for arg in sys.argv[1:]:
        if arg in ['-h', '--help']:
            break
    else:
        for x in self._subparsers._actions:
            if not isinstance(x, argparse._SubParsersAction):
                continue
            for sp_name in x._name_parser_map.keys():
                if sp_name in sys.argv[1:]:
                    subparser_found = True
        if not subparser_found:
            if args is None:
                sys.argv.insert(1, name)
            else:
                args.insert(0, name)

argparse.ArgumentParser.set_default_subparser = set_default_subparser


# 1. run FLARE backend
def run(args):
    THIS  = os.path.dirname(__file__)
    flare = os.path.join(THIS, "FLARE")
    cmd   = [flare, args.cmd, args.control_file]

    # debugging
    if args.debug: args.Debugger = 'gdb'
    if args.Debugger: [cmd.insert(0, x) for x in ['--args', args.Debugger]]

    # parallel execution
    if args.parallel: [cmd.insert(0, x) for x in [str(args.parallel), '-n', 'mpiexec']]

    # main call
    call(cmd)


# 2. connection length and other data plots
def plot(args):
    fplt.plot_data(args.data_file, args.data_key, args.geometry_file, plot_function=args.plot_function)
    plt.show()
# query data file for available data
def info(args):
    print fplt.Data(args.data_file)


# 3. interface for axisymmetric (2D) equilibrium
# 3.1. visualization
def equi2d_view(args):
    flare.equi2d.view(args.data_file, args.format)

# 3.2. create FLARE configuration for new equilibrium
def equi2d_init(args):
    flare.equi2d.init(args.data_file, args.format)


# 4. create parser for interfacing grid functions
# 4.1 mesh spacing
def mesh_spacing(args):
    filename = re.sub(" ", "_", args.spacing_command)
    flare.backend.mesh_spacing_interface.generate(args.spacing_command, args.sample_segments, filename, args.output_format)


def main():
    # create main parser
    parser      = argparse.ArgumentParser()
    subparsers  = parser.add_subparsers(title='commands', dest='cmd')

    # 1. create parser for FLARE backend
    parser_run  = subparsers.add_parser("run", help="run FLARE backend")
    # run control file
    parser_run.add_argument("-c", "--control_file", default="run.conf", help="set run control file (default: run.conf)")
    # parallel execution
    parser_run.add_argument("-p", "--parallel", type=int, help="parallel execution through mpiexec")
    # debugging
    debug_run   = parser_run.add_mutually_exclusive_group()
    debug_run.add_argument("-d", "--debug", action='store_true', help="run FLARE through default debugger (gdb)")
    debug_run.add_argument("-D", "--Debugger", help="run FLARE through selected debugger")
    # callback
    parser_run.set_defaults(func=run)


    # 2. create parser for connection length and other data plots
    parser_plot = subparsers.add_parser("plot", help="plot connection length and other data")
    parser_plot.add_argument("data_key", help="data key as listed by 'flare info'")
    #parser_plot.add_argument("-g", "--geometry_file", default=None, help="alternative geometry file")
    parser_plot.add_argument("-g", "--geometry_file", help="alternative geometry file")
    plot_functions = ['tricontourf', 'scipy_griddata_pcontourf', 'matplotlib_griddata_pcontourf']
    parser_plot.add_argument("-pf", "--plot_function", choices=plot_functions, default=plot_functions[0], help="select plot function for unstructured data")
    parser_plot.add_argument("data_file")
    parser_plot.set_defaults(func=plot)
    # 2.b
    parser_info = subparsers.add_parser("info", help="query data file for available data")
    parser_info.add_argument("data_file")
    parser_info.set_defaults(func=info)


    # 3. create parser for equi2d interface
    parser_equi2d = subparsers.add_parser("equi2d", help="interface for axisymmetric equilibrium")
    subparsers_equi2d = parser_equi2d.add_subparsers(title='subcommands', dest='scmd')
    # 3.1. visualize equilibrium
    p_equi2dview = subparsers_equi2d.add_parser("view", help="visualize equilibrium")
    p_equi2dview.add_argument("data_file")
    p_equi2dview.add_argument("-f", "--format", default="", help="equilibrium format string")
    p_equi2dview.set_defaults(func=equi2d_view)
    # 3.2. create FLARE configuration
    p_equi2dview = subparsers_equi2d.add_parser("init", help="initialize FLARE configuration for equilibrium")
    p_equi2dview.add_argument("-d", "--data_file", help="equilibrium data file (default: use bfield.conf)")
    p_equi2dview.add_argument("-f", "--format", default="", help="equilibrium format string")
    p_equi2dview.set_defaults(func=equi2d_init)


    # 4. create parser for interfacing grid functions
    parser_grid = subparsers.add_parser("grid", help="interface for grid related functions")
    subparsers_grid = parser_grid.add_subparsers(title='subcommands', dest='scmd')
    # 4.1. mesh spacing
    p_spacing = subparsers_grid.add_parser("spacing", help="generate mesh spacing function")
    p_spacing.add_argument("spacing_command")
    p_spacing.add_argument("-s", "--sample_segments", default=20, help="number of segments to sample")
    spacing_formats=['function', 'list']
    p_spacing.add_argument("-o", "--output_format", default=spacing_formats[0], choices=spacing_formats)
    p_spacing.set_defaults(func=mesh_spacing)


    # parse the args and call whatever subcommand was selected
    parser.set_default_subparser("run")
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
